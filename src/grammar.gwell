head: ${
    const TYPES = {
        Operation: 'operation',
        Default: 'default',
        Logical: 'logical',
        Assignment: 'assignment',
        Declare: 'declare',
        Control: 'control',
        Conditional: 'conditional',
        Loop: 'loop',
        Literal: 'literal',
        Array: 'array',
        Object: 'object',
        Lambda: 'lambda',
        Reference: 'reference',
        Query: 'query',
        Run: 'run',
        Call: 'call',
        Match: 'match',
        Spread: 'spread',
        Cluster: 'cluster',
        Constant: 'constant',
        Wildcard: 'wildcard',
        Yield: 'yield',
        Word: 'word'
    }
}

lexer: {{
    root ->
        - import: keywords
        - when: /\d+/ tag: "digits" highlight: "number"
        - when: /"(?:\\["bfnrt\/\\]|\\u[a-fA-F0-9]{4}|[^"\\])*"/ highlight: "string" tag: "string"
        - when: /[_a-zA-Z][_a-zA-Z\d]*/ tag: "word"
        - when: "..." tag: "l_spread" highlight: "keyword"
        - when: ".." tag: "l_concat" highlight: "keyword"
        - when: "=>" tag: "l_arrow" highlight: "keyword"
        - when: "==" tag: "l_eqeq" highlight: "keyword"
        - when: ">=" tag: "l_gteq" highlight: "keyword"
        - when: "<=" tag: "l_lteq" highlight: "keyword"
        - when: "+=" tag: "l_add" highlight: "keyword"
        - when: "-=" tag: "l_sub" highlight: "keyword"
        - when: "/=" tag: "l_div" highlight: "keyword"
        - when: "%=" tag: "l_mod" highlight: "keyword"
        - when: "*=" tag: "l_mul" highlight: "keyword"
        - when: "=" tag: "l_eq"
        - when: ">" tag: "l_gt" highlight: "keyword"
        - when: "<" tag: "l_lt" highlight: "keyword"
        - when: "+" tag: "l_add" highlight: "keyword"
        - when: "-" tag: "l_sub" highlight: "keyword"
        - when: "/" tag: "l_div" highlight: "keyword"
        - when: "%" tag: "l_mod" highlight: "keyword"
        - when: "*" tag: "l_mul" highlight: "keyword"
        - when: "?" tag: "l_qmark" highlight: "keyword"
        - when: "^" tag: "l_exp" highlight: "keyword"
        - when: ";" tag: "l_semi" highlight: "keyword"
        - when: ":" tag: "l_col" highlight: "keyword"
        - when: "!" tag: "l_exc" highlight: "keyword"
        - when: "." tag: "l_dot"
        - when: "," tag: "l_comma" highlight: "delimiter"
        - when: "(" tag: "l_lparen" highlight: "delimiter"
        - when: ")" tag: "l_rparen" highlight: "delimiter"
        - when: "{" tag: "l_lcurly" highlight: "delimiter"
        - when: "}" tag: "l_rcurly" highlight: "delimiter"
        - when: "[" tag: "l_lbrack" highlight: "delimiter"
        - when: "]" tag: "l_rbrack" highlight: "delimiter"
        - when: /\s+/ tag: "ws"

    keywords ->
        - when: /\$/ tag: "keyword" highlight: "keyword"
        - when: /set(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /var(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /const(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /asc(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /desc(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /function(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /true(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /false(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /null(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /any(?![a-zA-Z])/ tag: "keyword","word" highlight: "keyword"
        - when: /all(?![a-zA-Z])/ tag: "keyword","word" highlight: "keyword"
        - when: /within(?![a-zA-Z])/ tag: "keyword","word" highlight: "keyword"
        - when: /between(?![a-zA-Z])/ tag: "keyword","word" highlight: "keyword"
        - when: /and(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /or(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /on(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /if(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /match(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /default(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /in(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /else(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /for(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /like(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /not(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /while(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /until(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /to(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /do(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /run(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /return(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"

        - when: /query(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /scan(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /segment(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /filter(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /sort(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /aggregate(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /cluster(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"

        - when: /list(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"
        - when: /first(?![a-zA-Z])/ tag: "keyword" highlight: "keyword"

}}

grammar: {{
    // Uncomment the line below to allow experimental diagram generation
	// postprocessorOverride: ${ _ => _ }

    Chunk ->
         _ Statements _  : {{ { statements: $1} }}
        | _ Exp _ : {{ { expression: $1} }}

    Statements -> 
        Statement : {{ [$0] }}
        | Statements _ Statement : {{ ( $2.type == 'declare' &&  $2.kind =='function'? $0.unshift($2): $0.push($2)) && $0 }} // Hoist Functions

    Statement ->
        Assignment : {{ $0 }}
        | DeclareVar : {{ $0 }}
        | DeclareFunction : {{ $0 }}
        | Return : {{ $0 }}
        | IfBlock : {{ { type: TYPES.Conditional, statements: $0 } }}
        | IfBlock _ "else" _ Block : {{  { type: TYPES.Conditional, statements: $0.concat([{ condition: null, statements: $4 }])} }}
        | ScanBlock : {{ $0 }}
        | ConditionLoop : {{ $0 }}
        | LoopBlock : {{ $0 }}
        | "run" __ Exp _ ";" : {{ { type: TYPES.Run, expression: $2 }}}

    Assignment ->
        Reference _ "=" _ Exp _ ";" : {{ { type: TYPES.Assignment, name: $0,  value: $4 } }}
        | "set" __ Reference _ "=" _ Exp _ ";" : {{ { type: TYPES.Assignment, name: $2,  value: $6 } }}

    Assignment : {{ { type: TYPES.Assignment, name: $0,  value: { type: TYPES.Operation, operator: $2.value[0], operands: [$0, $4] } } }} ->
         Reference _ "+=" _ Exp _ ";"
        | Reference _ "-=" _ Exp _ ";"
        | Reference _ "/=" _ Exp _ ";"
        | Reference _ "*=" _ Exp _ ";"
        | Reference _ "%=" _ Exp _ ";"

    DeclareVar ->
        "var" __ Word _ "=" _ Exp _ ";" : {{ { type: TYPES.Declare, kind: 'var', name: $2, value: $6 } }}
        | "const" __ Word _ "=" _ Exp _ ";" : {{ { type: TYPES.Declare, kind: 'const', name: $2, value: $6 } }}

    Return ->
        "return" _ Exp:exp _ ";" : {{ { type: TYPES.Control, kind: "return", value: $exp } }}
    
    DeclareFunction ->
        "function" _ Word:name _ "(" _ FunctionArg_list:args _ ")" _ Block:block : {{ { type: TYPES.Declare, kind: 'function', name: $name, args: $args, statements: $block } }}
        | "function" _ Word:name _ "(" _ ")" _ Block:block : {{ { type: TYPES.Declare, kind: 'function', name: $name, args: [], statements: $block } }}

    IfBlock ->
        "if" _ Exp _ Block : {{ [{ condition: $2, statements: $4 }] }}
        | IfBlock _ "else" _ IfBlock : {{ $0.concat($4) }}

    ScanBlock ->
        "scan" __ KVInIterator:kv _ Block:block : {{ { type: TYPES.Loop, kind: 'scan', ...$kv, statements: $block } }}

    KVInIterator -> 
        Word:value __ "in" _ Exp:exp : {{ { v: $value, iterable: $exp } }}
        |  Word:value _ "," _ Word:key __ "in" _ Exp:exp : {{ { k: $key, v: $value, iterable: $exp } }}

    ConditionLoop ->
       "while" _ Exp:condition _ Block:block : {{ { type: TYPES.Loop, kind:'while', condition: $condition, statements: $block } }}
        | "until" _ Exp:condition _ Block:block : {{ { type: TYPES.Loop, kind:'while', condition: { type: TYPES.Operation, operator: "!", operands: [$condition] }, statements: $block } }}
        | "do" _ Block:block __ "while" _ Exp:condition : {{ { type: TYPES.Loop, kind:'while', condition: $condition, statements: $block } }}
        | "do" _ Block:block __ "until" _ Exp:condition : {{ { type: TYPES.Loop, kind:'while', condition: { type: TYPES.Operation, operator: "!", operands: [$condition] }, statements: $block } }}

    LoopBlock ->
        "for" _ "(" _ DeclareVar:base  _ Exp:condition _ ";" _ Assignment:step _ ")" _ Block:block : {{ { type: TYPES.Loop, kind:'for', base: $base, step: $step, condition: $condition, statements: $block } }}

    Block -> "{" _ Statements _ "}" : {{ $2 }}
        | "{" _ "}" : {{ [] }}

    Exp_list -> Exp : {{ [ $0 ] }}
        | Exp_list _ "," _ Exp : {{ $0.concat($4) }}

    Exp_ss -> Exp : {{ [ $0 ] }}
        | Exp_ss _ ";" _ Exp : {{ $0.concat($4) }}

    Exp : {{ $0 }} ->
        Query
        | Lambda
        | ExpOr
        | Object

    ExpOr ->
        ExpOr _ "or" _ ExpAnd : {{ { type: TYPES.Logical, operator: "any", operands: [$0, $4] } }} 
        | ExpAnd : {{ $0 }}

    ExpAnd ->
         ExpAnd _ "and" _ ExpCompare  : {{ { type: TYPES.Logical, operator: "all", operands: [$0, $4] } }}
        | ExpCompare : {{ $0 }}

    ExpCompare : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4] } }} ->
        ExpCompare _ "<"  _ ExpConcat
        | ExpCompare _ ">"  _ ExpConcat
        | ExpCompare _ "<=" _ ExpConcat
        | ExpCompare _ ">=" _ ExpConcat
        | ExpCompare _ "!=" _ ExpConcat
        | ExpCompare _ "==" _ ExpConcat
        | ExpCompare _ "like" _ ExpConcat
        | ExpCompare _ "within" _ Range : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4.low, $4.high] } }}
        | ExpCompare _ "between" _ Range : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4.low, $4.high] } }}
        | ExpConcat : {{ $0 }}

    ExpConcat : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4] } }} ->
        ExpSum _ ".." _ ExpConcat
        | ExpSum : {{ $0 }}

    ExpSum : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4] } }} ->
        ExpSum _ "+" _ ExpProduct
        | ExpSum _ "-" _ ExpProduct
        | ExpProduct : {{ $0 }}

    ExpProduct : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4] } }} ->
        ExpProduct _ "*" _ ExpUnary
        | ExpProduct _ "/" _ ExpUnary
        | ExpProduct _ "%" _ ExpUnary
        | ExpUnary : {{ $0 }}

    ExpUnary : {{ { type: TYPES.Operation, operator: "!", operands: [$2] } }} ->
        "!" _ ExpPower
        | "not" _ ExpPower
        | ExpPower : {{ $0 }}

    ExpPower ->
        Atom _ "^" _ ExpPower : {{ { type: TYPES.Operation, operator: $2.value, operands: [$0, $4] } }}
        | Atom : {{ $0 }}

    Atom : {{ $0 }} ->
        Number
        | NegativeNumber
        | String
        | Constant
        | Regex
        | Reference
        | Group
        | FunctionCall
        | Array
        | VariadicLogic
        | Match

    Constant : {{ { type: TYPES.Constant, value: $0.value } }} ->
        "null"
        | "false"
        | "true"

    Reference ->
        Path   : {{  { type: TYPES.Reference, path: $0 } }}

    Path ->
        Word : {{ [{ type: TYPES.Word, value: $0 }] }}
        | Path _ "." _ Word : {{ $0.concat({ type: TYPES.Word, value: $4}) }}
        | Path _ "[" _ Exp _ "]" : {{ $0.concat($4) }}
        | Path _ "[" _ "?" _ "]" : {{ $0.concat({ type: TYPES.Wildcard }) }}

    Word -> $word : {{ $0.value }}

    Group -> "(" _ Exp _ ")" : {{ $2 }}

    Number ->
        $digits "." $digits : {{ { type: TYPES.Literal, kind: 'number', value: $0.value  + "." + $2.value } }}
        | $digits : {{ { type: TYPES.Literal, kind: 'number', value: $0.value } }}

    NegativeNumber ->  "-" _ Number : {{ { type: TYPES.Literal, kind: 'number', value: '-' +$2.value } }}

    String -> $string : {{ { type: TYPES.Literal, kind: 'string', value: JSON.parse($0.value) } }}

    Array -> "[" _ "]" : {{ { type: TYPES.Array, items: [] } }}
        | "[" _ Exp_list _ "]" : {{ { type: TYPES.Array, items: $2 } }}

    Object -> "{" _ "}" : {{ { type: TYPES.Object, properties: [] } }}
        | "{" _ Prop_list _ "}" : {{ { type: TYPES.Object, properties: $2 } }}

    Prop_list -> Prop : {{ [$0] }}
        | Prop_list _ "," _ Prop : {{ $0.concat($4) }}

    Prop -> PropName _ ":" _ Exp : {{ { key: $0, value: $4 } }}
        | "..." _ Exp : {{ { type: TYPES.Spread, value: $2 } }}
        | Word : {{ { key: $0, value: { type: TYPES.Reference, path: $0 } } }}

    Query -> QQuery ( __ QFilter)? __ QYield ( __ QCluster)? ( __ QSort)?  ( __ QSlice)? : {{ { type: TYPES.Query,  source: $0, filter: $1?.[1], yield: $3, cluster: $4?.[1], sort: $5?.[1],  slice: $6?.[1] } }}

    QQuery : {{ { kind:$0.value, iterable: $2 } }} -> "query" __ KVInIterator 

    QSort -> "sort" __ Exp ( __ "desc"|"asc")? : {{ { expression: $2, direction: $3?.[1].value } }}

    QFilter -> "filter" __ Exp : {{ $2 }}

    QYield : {{ { type: TYPES.Yield, kind: $0.value, value: $2 } }} ->  "list" __ Exp
        | "first" __ Exp
        | "aggregate" _ Object
        | "aggregate" __ Lambda

    QCluster -> "cluster" __ "(" _ Exp_list _ ")" : {{ $4 }}

    QSlice -> "segment" __ Range : {{ $2 }}

    Range ->  Exp
     _ "to" _ Exp
     : {{ { low: $0, high: $4 } }}

    Alias -> Reference : {{ $0 }}
        | Reference __ "as" __ Word : {{ { ...$0, alias: $4 } }}
        | Reference __ Word  : {{ { ...$0, alias: $2 } }}

    Alias_list -> Alias : {{ [$0] }}
        | Alias_list _ "," _ Alias : {{ $0.concat($4) }}

    Lambda -> "(" _ FunctionArg_list _ ")" _ "=>" _ Exp:expression : {{ { type: TYPES.Lambda, arguments: $2, expression: $expression  } }}
        | "(" _ ")" _ "=>" _ Exp:expression : {{ { type: TYPES.Lambda, arguments: $2, expression: $expression  } }}
        | Word _ "=>" _ Exp:expression : {{ { type: TYPES.Lambda, arguments: $2, expression: $expression  } }}

    FunctionArg -> Word : {{ { name: $0 } }}
        | Word _ "=" _ Exp : {{ { name: $0, default: $4 } }}

    FunctionArg_list -> FunctionArg : {{ [$0] }}
        | FunctionArg_list _ "," _ FunctionArg : {{ $0.concat($4) }}

    PropName : {{ $0 }} -> String | Word 

    FunctionCall -> Word:name _ "(" _ Exp_list:args _  ")" : {{ { type: TYPES.Call, name: $name, args: $args } }}
        | Word:name _ "(" _ ")" : {{ { type: TYPES.Call, name: $name, args: [] } }}

    VariadicLogic : {{ { type: TYPES.Logical, operator: $0.value, operands: $4 } }}-> "any" _ "{" _ Exp_ss _  ( ";" _ )? "}"
        | "all" _ "{" _ Exp_ss _ ( ";" _ )? "}"

    Match -> "match" _ "{" _ MatchStatement_list _ "}" : {{ { type:TYPES.Match, statements: $4 } }}

    MatchStatement -> Exp _ ":" _ Exp _  ";" : {{ { condition: $0, value: $4 } }}
        | "default" _ ":" _ Exp _ ";" : {{ { type: TYPES.Default , value: $4 } }}

    MatchStatement_list -> MatchStatement : {{ $0.type == TYPES.Default ? ({ default: $0, conditions: [] }) : ({ conditions: [$0] }) }}
        | MatchStatement_list _ MatchStatement : {{ ($2.type == TYPES.Default ? $0.default = $2 : $0.conditions.push($2)) && $0  }}

    _ -> $ws? : {{ null }}
    __ -> $ws : {{ null }}
}}